<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:fn="http://www.w3.org/2005/xpath-functions"
        targetNamespace="http://www.dimo-omp.de"
        xmlns:tns="http://www.dimo-omp.de"
        elementFormDefault="qualified"
        xpathDefaultNamespace="##targetNamespace"
>
    <!--
            xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
            vc:minVersion="1.1"
    -->
    <complexType name="GetBookingsRequestType">
        <sequence>
            <element name="Filter" type="tns:FilterEnum"/>
            <choice>
                <element name="Equals" type="anyType"/>
                <element name="NotEquals" type="anyType"/>
                <!--<element name="InList" type="anyType"/>-->
                <element name="IsNull" type="anyType"/>
                <element name="IsNotNull" type="anyType"/>
                <element name="GreaterThan" type="anyType"/>
                <element name="LessThan" type="anyType"/>
            </choice>
        </sequence>
    </complexType>

    <complexType name="GetBookingsResponseType">
        <sequence>
            <element name="UserId" type="int"/>
            <element name="BookingId" type="string"/>
            <element name="BookingFrom" type="dateTime"/>
            <element name="BookingTo" type="dateTime"/>
        </sequence>
        <assert test="BookingFrom le BookingTo"/>
    </complexType>

    <simpleType name="FilterEnum">
        <restriction base="string">
            <enumeration value="UserId"/>
            <enumeration value="UserIdUserId"/>
            <enumeration value="BookingFrom"/>
            <enumeration value="BookingTo"/>
        </restriction>
    </simpleType>

    <element name="GetBookingsRequest" type="tns:GetBookingsRequestType"/>
    <element name="GetBookingsResponse" type="tns:GetBookingsResponseType"/>

    <complexType name="ChoiceRequestType">
        <sequence>
            <element name="Requested" type="string"/>
        </sequence>
    </complexType>
    <complexType name="ChoiceResponseType">
        <choice>
            <element name="OptionA" type="int"/>
            <element name="OptionB" type="string"/>
        </choice>
    </complexType>
    <element name="ChoiceRequest" type="tns:ChoiceRequestType"/>
    <element name="ChoiceResponse" type="tns:ChoiceResponseType"/>

    <complexType name="CountRequestType">
        <sequence>
            <element name="MaxAnswers" type="int"/>
        </sequence>
    </complexType>
    <complexType name="CountResponseType">
        <sequence>
            <element name="Answer" type="string" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    <element name="CountRequest" type="tns:CountRequestType"/>
    <element name="CountResponse" type="tns:CountResponseType"/>

    <complexType name="FutureRfidRequestType">
        <sequence>
        </sequence>
    </complexType>
    <complexType name="FutureRfidResponseType">
        <sequence>
            <element name="RfidTag" type="tns:RfidType" maxOccurs="unbounded"/>
        </sequence>
        <assert test="every $tag in RfidTag satisfies $tag/Expiry ge fn:current-dateTime()"/>
    </complexType>
    <complexType name="RfidType">
        <sequence>
            <element name="Identifier" type="NMTOKEN"/>
            <element name="Expiry" type="dateTime"/>
        </sequence>
    </complexType>
    <element name="FutureRfidRequest" type="tns:FutureRfidRequestType"/>
    <element name="FutureRfidResponse" type="tns:FutureRfidResponseType"/>

    <complexType name="SortingRequestType">
        <sequence>
            <element name="Order" type="tns:SortOrderType"/>
        </sequence>
    </complexType>
    <simpleType name="SortOrderType">
        <restriction base="string">
            <enumeration value="ASC"/>
            <enumeration value="DESC"/>
        </restriction>
    </simpleType>
    <complexType name="SortingResponseType">
        <sequence>
            <element name="Answer" type="int" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    <element name="SortingRequest" type="tns:SortingRequestType"/>
    <element name="SortingResponse" type="tns:SortingResponseType"/>
</schema>
